7.8固定结构 变量 常量
固定结构
#include<stdio.h> //注意没有分号
int main()
{
	//运用数据类型申请内存
	char z = 'm';
	printf("%c\n",z);//不要忘记打逗号
	//第二个函数 sizeof判断申请的内存大小
	printf("%d\n", sizeof(char));//1
	printf("%d\n", sizeof(int));//4
	printf("%d\n", sizeof(short));//2
	printf("%d\n", sizeof(long));//4
	printf("%d\n", sizeof(long long));//8
	printf("%d\n", sizeof(float));//4
	printf("%d\n", sizeof(double));//8
	//1byte=8bit
	//1kb=1024byte  mb gb tb pb
	return 0;
}


变量 常量
#include<stdio.h>
int num1 = 0;//全局变量定义在{}前 全局变量的生命周期是整个程序
int main()
{
	int num2 = 0;//局部变量 局部变量的生命周期是进入作用域 出作用域则死亡
	//输入数据 输入函数scanf 类似python中的input
	scanf_s("%d%d", &num1, &num2);//取地址符号&  scanf 的功能用一句话来概括就是“通过键盘给程序中的变量赋值”
	int sum = 0;
	sum = num1 + num2;
	printf("sum=%d\n", sum);
		return 0;
}
7.9三种常量 字符串 选择语句以及取址函数
常量
#include<stdio.h>
int main()
{
	//const 常属性 const修饰的常变量 变为常值不变
	const int num = 4;
	printf("%d\n", num);//f打掉了
	int arr[1] = { 0 };
	printf("%d\n", arr);

	return 0;
}


#define定义的常量
#define MAX 10//在用#define定义常量时不能加 =
#include<stdio.h>
int main()
{
	int arr[MAX] = { 0 };
	printf("%d\n", MAX);

	return 0;
}


枚举常量 枚举关键字enum
#include<stdio.h>
enum sex {
	male,
	female,
	secret
};
//枚举常量
enum color {
	red,
	yellow,
	blue
};
int main()
{
	enum sex s = female;
	enum sex x = male;
	printf("%d\n", female);
	printf("%d\n", male);
	printf("%d\n", secret);
	printf("%d\n", x);
	return 0;
}



字符串

#include<stdio.h>
int main()
{
	char arr1[] = "abc";//数组 默认字符串里边结尾加了\0 相当于终止符 不占位
	char arr2[] = {'a','b','c','\0'};
	printf("%s\n", arr2);//打印字符串用s d是int类型 
	char arr3[] = "abc";
	char arr4[] = {'a','b','c' ,0};
 //转义字符 \0终止符  \t水平制表符 \n换行符 \?  \可以转义\，让其不成为转义字符里面的\ 转义字符都不占位
	printf("%d\n", strlen(arr3));
	printf("%s\n",arr4);
	printf("%d\n", strlen(arr4));
	printf("c\tsts\888\tsxt.c");
	return 0;
}


选择语句   还有取址函数
#include<stdio.h>
int main()
{
	int input= 0;
	printf("do you want a cup of tea?\n");
	printf("<1>yes <2>no\n");
	scanf_s("%d", &input);
	if(input == 1)
		printf("you are welcome\n");
	else
		printf("that is alright\n");
	return 0;
}
7.15初识while循环 函数 数组
初识while循环
#include<stdio.h>
int main()
{
	int line = 0;
	printf("加入bit\n");

	while (line < 20000)
	{
		printf("敲一行代码\n");
		line++;//重复添加
	}
	if(line>=20000)

		printf("好offer");
	return 0;
}

函数
#include<stdio.h>
Add(int x, int y)
{
	int z = x + y;
		return z;
}
int main()
{
	int num1 = 0;
	int num2 = 0;
	printf("请输入你想要相加的两个数字：\n");
	scanf_s("%d%d", &num1, &num2);
	
	int sum = Add(num1, num2);
	printf("两个数字的和为%d\n", sum);
	return 0;
}

数组
#include<stdio.h>
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};//定义一个存放十个整数的数组
	int i = 0;
		while (i < 10)
		{
			printf("%d ", arr[i]);
			i++;
			
	}
	

	return 0;
}


符号
#include<stdio.h>
int main()
{
	//int a = 5/2;     //%取余数    /取上的数
	//printf("%d", a);
	//位操作
	//&按位与
	//|按位或
	//^按位异或 相同为0，否则为1
	int a = 0;       //011
	int b = 5;        //101
	int c = a & b;    //001   理解与或的关系用二进制带入即可
	printf("%d\n", !a);
		return 0;
}
7.16.一个简单函数 部分操作符和符号
写一个简单的函数
#include<stdio.h>
int Max(int x, int y)//注意没有分号 而且在梦函数外
{
	if (x > y)//没有分号
		return x;//不需要大括号也不需要print但需要有返回值
	else
		return y;
}
int main()
{
	int num1 = 1;
	int num2 = 0;
	int max = 0;
	scanf_s("%d %d\n",&num1, &num2);//取址函数的&&&不能掉了
	max=Max(num1,num2);
	printf("max=%d\n", max);
	return 0;
}



一些符号
#include<stdio.h>
int main()
{
	//int a = 0;
	//int是4个字节32个bit
	//即为00000000000000000000000000000000
	//int b = ~a;//~对一个数的二进制单位取反
	//变为11111111111111111111111111111111（补码
	//源码符号位不变，其余取反，得到反码，反码加1得到补码
	//反码11111111111111111111111111111110
	//源码10000000000000000000000000000001
    //printf("%d", b);//打印的是源码
	int a = 10;
	int b = a++;//后置++，先使用a的初始值，即b=10，再用++，a被赋值为11
	int b = ++a;//前置++，先用++，a被赋值为11后再赋值给b 此时a b均为11
	//（）强制类型转换
	// && and
	// || or
	print("%d %d\n", a, b);

	return 0;
}


操作符 
#include<stdio.h>
int Add(int x, int y)
{
	return x + y;
}
int main()
{
	int a =10;
	int b = 20;
	//条件操作符
	//exp1 ? exp2 : exp3; exp1为真执行exp2 为假执行exp3
	//int max = (a > b ? a : b);
	//printf("%d\n", max);
	//下标引用操作符
	//int arr[10] = { 0 };
	//arr[3];//下标引用操作符
	int sum= Add(a, b);//函数调用操作符
	printf("%d\n", sum);
	return 0;
}

typedef重新定义名称，当然重新定义后仍然可以使用原有的
static修饰局部变量，不会被再次赋值，可以简化for循环，不能跨文件使用
static修饰全局变量，改变了作用范围，只能在一个被使用的源文件中使用
exturn声明外部符号
7.19.do while循环 switch语句
在for循环外部定义的int在其内部不能再使用去定义
尤其注意分号
do while循环
do
   循环语句
while（表达式）；

循环练习题
 1.
#include<stdio.h>
int main()
{
 int a=0;
	scanf_s("%d", &a);
	int p = 1;
	for (int i=1; i <= a; i++)
	{
		
		p = p * i;
	}
	printf("%d\n", p);
}

 2.
#include<stdio.h>
int plus(int a)
{


	int p = 1;
	for (int i = 1; i <= a; i++)
	{
		p = p * i;
	}
	return p;
}
int main()
{
	int sum = 0;
	int num = 0;
	for (int i = 1; i <= 10; i++)
	{
		num = plus(i);
		sum = sum + num;

	}
	printf("%d\n", sum);
	return 0;
}


5.
#include<stdio.h>
int main()
{
	
	for (int i = 0; i < 3; i++)
	{
		int p = 0;
		printf("请输入你的密码：\n");
		scanf_s("%d", &p);
		if (p==2004)
		{
			printf("登陆成功\n");
			
		}
		else
			printf("请再试一次\n");
	}
	
	return 0;
}


switch
switch像for循环的简略版，但会多一些变化
写一个简单的switch
#include<stdio.h>
int main()
{
	int i = 0;
	scanf_s("%d", &i);
	switch (i)//swtich里面必须是整型 不能是float
	{
	case(1)://注意case括号里面的
		printf("工作日");
		break;//case是入口 break是出口
	case(2):
		printf("工作日");
	case(3):
		printf("工作日");
	}
	return 0;
}

#include<stdio.h>
int main()
{
	int n = 1;
	int m = 2;
	switch (m)
	{
	case(1):
		n++;
	case(2):
		n++;
		m=m+3;
	case(3):
		switch (m)
		{
		case(5):
			n++;
			m++;
		}
		printf("%d %d", m, n);
7.24函数 以及初步了解指针
字符串操作函数
字符操作函数
时间函数
数学函数 sqrt开放 math.h
strcpy
strlen
#include<string.h>
#include<stdio.h>
void exchange(int*px, int*py)//表示没有返回值
{
	int save = 0;
	save =*px;
	*px = *py;;
	*py = save;;
}
int main()
{
	int a = 10;
	int b = 20;
	exchange(&a, &b);
	printf("%d %d\n", a, b);
	return 0;
}//为什么要用指针？
//在梦函数中将a b的值传给自定义函数exchange后，x y有自己的空间，无法从外部传到梦函数内部 因此需要用指针
对比比大小的max函数 有return值 而exchange没有return值，初步理解为有return无指针


#include <stdio.h>
#include <stdlib.h>
int sum = 1;
int nor = 0;
int solution(int N) 
{
    for (int i = 2; i <= N; i++)
    {
        nor = i;
        sum = sum ^ nor;
    }
    return sum;
}

int main() 
{
    int N;
    scanf_s("%d", &N);

    int fr=solution(N);
    printf("%d\n", fr);
    return 0;
}


	}
	return 0;
}
7.25递归 源文件 头文件 以及跨源文件的使用
递归的思想是把一个大型复杂问题层层转化为一个与原问题规模更小的问题，问题被拆解成子问题后，递归调用继续进行，直到子问题无需进一步递归就可以解决的地步为止。
什么时候考虑递归
具有以下特征的问题可考虑递归求解：
当问题和子问题具有递推关系，比如杨辉三角、计算阶乘（后文讨论）。
具有递归性质的数据结构，比如链表、树、图。
反向性问题，比如取反。
递归有可能很多计算都是重复的，从而对性能带来很大的负面影响。递归实际上是把一个大问题拆成很多小问题，如果那些小问题存在相互重叠的部分，就存在重复的计算。
一个简单的递归  一个函数调用本身叫递归，递归的思想在于把大事化小.
从大方向入手去解决小分支，解决分支的过程中有些循环的意味.
 递归有可能很多计算都是重复的，从而对性能带来很大的负面影响。递归实际上是把一个大问题拆成很多小问题，
 如果那些小问题存在相互重叠的部分，就存在重复的计算。
递归常见的错误：栈溢出
#include<stdio.h>
void print(int x)
{
	if (x> 9)
	{
		print(x / 10);
	}
	printf("%d\n", x % 10);
}
int main()
{
	int a = 0;
	scanf_s("%d", &a);
	print(a);
	return 0;
}
add.c 源文件 在源文件中创建函数
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include"add.h"
int Add(int x,int y)
{

	return x + y;
}
add.h头文件中声明
#ifndef __ADD_H__
#define __ADD_H__

//函数的声明
int Add(int x, int y);


#endif
#define _CRT_SECURE_NO_WARNINGS
//在头文件中声明函数  源文件中创建函数（具有一定的格式）
//在源文件中使用的时候需要引用头文件
#include<stdio.h>
#include"add.h"
int main()
{
	int a = 10;
	int b = 20;
	int sum = Add(a, b);
	printf("%d\n", sum);
	return 0;
}
7.26
利用递归写一个n的阶乘，不考虑栈溢出。
#include<stdio.h>
int num(int n)
{
	if (n > 1)
	{
		return n * num(n - 1);
	}
	else
		return 1;//注意是乘法，当然也包括没有理解清楚的部分。
}
int main()
{
	int N = 0;
	scanf_s("%d", &N);
	int a=num(N);
	printf("%d\n", a);
	return 0;
}

斐波那契数列
#include<stdio.h>
int fib(int N)
{
	if (N > 1)
		return fib(N-2) + fib(N - 1);
	else
		return 1;
}
int main()
{
	int n = 0;
	scanf_s("%d", &n);
	int res = fib(n);
	printf("%d\n", res);
	return 0;
}


汉诺塔问题
#include<stdio.h>
int function(int N)
{
	if (N >=1)
		return 2 * function(N - 1);
	else
		return 1;
}
int main()
{
	int N = 0;
	scanf_s("%d", &N);
	int res = function(N)-1;
	printf("%d\n", res);
	return 0;
}
